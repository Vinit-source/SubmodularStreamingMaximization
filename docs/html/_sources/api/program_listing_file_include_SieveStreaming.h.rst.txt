
.. _program_listing_file_include_SieveStreaming.h:

Program Listing for File SieveStreaming.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_SieveStreaming.h>` (``include/SieveStreaming.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef SIEVESTREAMING_H
   #define SIEVESTREAMING_H
   
   #include "DataTypeHandling.h"
   #include "SubmodularOptimizer.h"
   #include <algorithm>
   #include <numeric>
   #include <random>
   #include <unordered_set>
   
   inline std::vector<data_t> thresholds(data_t lower, data_t upper, data_t epsilon) {
       std::vector<data_t> ts;
   
       if (epsilon > 0.0) {
           // int i = std::ceil(std::log(lower) / std::log(1.0 + epsilon));
           // data_t val = std::pow(1+epsilon, i);
   
           // while( val < upper) {
           //     val = std::pow(1+epsilon, i);
           //     ts.push_back(val);
           //     ++i;
           // }
   
           int ilower = std::ceil(std::log(lower) / std::log(1.0 + epsilon));
           //int iupper; // = std::floor(std::log(upper) / std::log(1.0 + epsilon));
           // data_t tmp = std::log(upper) / std::log(1.0 + epsilon);
           // if (tmp == std::floor(tmp)) {
           //     iupper = std::floor(tmp) - 1;
           // } else {
           //     iupper = std::floor(tmp);
           // }
   
           // if (ilower >= upper)
           //     throw std::runtime_error("thresholds: Lower threshold boundary (" + std::to_string(ilower) + ") is higher than or equal to the upper boundary ("
           //                             + std::to_string(upper) + "), epsilon = " + std::to_string(epsilon) + ".");
   
           for (data_t val = std::pow(1.0 + epsilon, ilower); val <= upper; ++ilower, val = std::pow(1.0 + epsilon, ilower)) {
               ts.push_back(val);
           }
       } else {
           throw std::runtime_error("thresholds: epsilon must be a positive real-number (is: " + std::to_string(epsilon) + ").");
       }
       
       return ts;
   }
   
   class SieveStreaming : public SubmodularOptimizer {
   private:
   
       class Sieve : public SubmodularOptimizer {
       public:
           // The threshold
           data_t threshold;
   
           Sieve(unsigned int K, SubmodularFunction & f, data_t threshold) : SubmodularOptimizer(K,f), threshold(threshold) {}
   
           Sieve(unsigned int K, std::function<data_t (std::vector<std::vector<data_t>> const &)> f, data_t threshold) : SubmodularOptimizer(K,f), threshold(threshold) {
           }
   
           void fit(std::vector<std::vector<data_t>> const & X, unsigned int iterations = 1) {
               throw std::runtime_error("Sieves are only meant to be used through SieveStreaming and therefore do not require the implementation of `fit'");
           }
   
           void next(std::vector<data_t> const &x, std::optional<idx_t> const id = std::nullopt) {
               unsigned int Kcur = solution.size();
               if (Kcur < K) {
                   data_t fdelta = f->peek(solution, x, solution.size()) - fval;
                   data_t tau = (threshold / 2.0 - fval) / static_cast<data_t>(K - Kcur);
   
                   if (fdelta >= tau) {
                       f->update(solution, x, solution.size());
                       solution.push_back(x);
                       if (id.has_value()) ids.push_back(id.value());
                       fval += fdelta;
                   }
               }
               is_fitted = true;
           }
       };
   
   protected:
       // A list of all sieves
       std::vector<std::unique_ptr<Sieve>> sieves;
   
   public:
   
       SieveStreaming(unsigned int K, SubmodularFunction & f, data_t m, data_t epsilon) : SubmodularOptimizer(K,f) {
           std::vector<data_t> ts = thresholds(m, K*m, epsilon);
   
           for (auto t : ts) {
               sieves.push_back(std::make_unique<Sieve>(K, f, t));
           }
       }
   
       SieveStreaming(unsigned int K, std::function<data_t (std::vector<std::vector<data_t>> const &)> f, data_t m, data_t epsilon) : SubmodularOptimizer(K,f) {
           std::vector<data_t> ts = thresholds(m, K*m, epsilon);
           for (auto t : ts) {
               sieves.push_back(std::make_unique<Sieve>(K, f, t));
           }
       }
   
       unsigned int get_num_candidate_solutions() const {
           return sieves.size();
       }
   
       unsigned long get_num_elements_stored() const {
           unsigned long num_elements = 0;
           for (auto const & s : sieves) {
               num_elements += s->get_solution().size();
           }
   
           return num_elements;
       }
   
       ~SieveStreaming() {
           // for (auto s : sieves) {
           //     delete s;
           // }
       }
   
       void next(std::vector<data_t> const &x, std::optional<idx_t> const id = std::nullopt) {
           // // MAX_GUESSED SHOULD BE bool TEMPLATE PARAM
           // if constexpr (MAX_GUESSED) {
           //     std::vector<std::vector<data_t>> singleton(1);
           //     singleton[0] = x;
           //     data_t mnew = f(singleton);
           //     // m must be a member
           //     if (mnew > m) {
           //         m = mnew;
           //         std::vector<data_t> ts = thresholds(m, 2*K*m, epsilon);
           //         // delete all sieves with wrong thresholds
           //     }
           // }
           for (auto &s : sieves) {
               s->next(x, id);
               if (s->get_fval() > fval) {
                   fval = s->get_fval();
                   // TODO THIS IS A COPY AT THE MOMENT
                   solution = s->solution;
               }
           }
           is_fitted = true;
       }
   };
   
   #endif
